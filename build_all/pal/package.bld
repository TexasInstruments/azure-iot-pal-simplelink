/*
 * Copyright (c) 2018, Texas Instruments Incorporated
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions
 * are met:
 *
 * *  Redistributions of source code must retain the above copyright
 *    notice, this list of conditions and the following disclaimer.
 *
 * *  Redistributions in binary form must reproduce the above copyright
 *    notice, this list of conditions and the following disclaimer in the
 *    documentation and/or other materials provided with the distribution.
 *
 * *  Neither the name of Texas Instruments Incorporated nor the names of
 *    its contributors may be used to endorse or promote products derived
 *    from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO,
 * THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
 * PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR
 * CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
 * EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
 * PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS;
 * OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY,
 * WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR
 * OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE,
 * EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 */

/*
 *  ======== package.bld ========
 */

var Build = xdc.useModule('xdc.bld.BuildEnvironment');
var Pkg = xdc.useModule('xdc.bld.PackageContents');

/* make command to search for the srcs */
Pkg.makePrologue = "vpath %.c ../../pal/src";

/* lib/ is a generated directory that 'xdc clean' should remove */
Pkg.generatedFiles.$add("lib/");

var SRCS_PAL = [
    "httpapi_sl.c",
    "platform_sl.c",
    "tlsio_sl.c",
    "tickcounter_sl.c",
    "threadapi_pthreads_sl.c"
]

/* Paths to external source libraries */
xdcargs = java.lang.System.getenv("XDCARGS").split(" ");

var slIncs = "";
var incs = "";
var palIncs = "-I../../pal/inc -I../../sdk/c-utility/inc ";

/* Parse out the XDCARGS options for the include source paths */
for (x = 0; x < xdcargs.length; x++) {
    if (xdcargs[x].match(/^CC32XXSDK=/)) {
        incs = (xdcargs[x] + "").replace(/'/g, '');
        incs = incs.substring(incs.indexOf('=') + 1);
        if (incs != "\"\"") {
            incs += "/source";
            slIncs = "-I" + incs + " -I" + incs + "/include -I" + incs
                    + "/ti/net/bsd -I" + incs;
        }
    }

    if (xdcargs[x].match(/^MSP432E4SDK=/)) {
        incs = (xdcargs[x] + "").replace(/'/g, '');
        incs = incs.substring(incs.indexOf('=') + 1);
        if (incs != "\"\"") {
            if (slIncs != "") {
                throw("Error: Please fill in only one set of variables "
                        + "in products.mak corresponding to your platform");
            }

            incs += "/source";
            slIncs = "-I" + incs + " -I" + incs + "/include -I" + incs
                    + "/ti/net/bsd -I" + incs;
        }
    }
}

for (var i = 0; i < Build.targets.length; i++) {
    var target = Build.targets[i];
    var libdir = getLibDirectory(target.suffix);
    var extraOpts;
    var posixIncs;

    for (var profile in target.profiles) {
        var defs = "";
        posixIncs = "/ti/posix" + "/" +
            getPosixIncDirectory(target.suffix) + " ";
        extraOpts = palIncs;
        /* Add back unused warnings in PAL */
        if (target.$name.split(".")[0] == "gnu") {
            extraOpts += " -Wunused ";
        }
        Pkg.addLibrary(libdir + "/pal_sl_" + profile,
            target, {
                profile: profile,
                defs: "-DNET_SL -DREFCOUNT_ATOMIC_DONTCARE " + extraOpts,
                incs: slIncs + posixIncs,
                suffix: '.a'
            }).addObjects(SRCS_PAL);
    }
}
